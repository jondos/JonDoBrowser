-siehe aboutDialog.xul und aboutDialog.js als Start ("Klasse" appUpdater())
-app.update.auto regelt, ob button im deck aktiv ist oder automatisch nach
Updates gesucht wird.
-einige Eigenschaften der Update-Zerts sind hart-kodiert (Common Name, Issuer
  name

Funktionsweise:
===============

-Anzeige, dass Updates gesucht werden + isChecking = true
-this.checker.checkForUpdates(this.updateCheckListener, true);
        |                                   |
      @mozilla.org/updates/update-checker;1 + nsIUpdateChecker <- in
        | nsUpdateService deklariert        |
        |                                   |
        |      nsIUpdateCheckListener wird in aboutDialog.js implementiert
        |
      toolkit/mozapps/update/nsUpdateService.js
          |
        this.getUpdateURL(force) ["force" ist zweiter Parameter von oben]
            |
          default-URL kann mit app.update.url.override überschrieben werden
            |
          URL-Anpassung (z.B. PRODUCT-Auflösung, gewünschten Channel anhängen
            und force)
          |
        XHR-Konstruktion mit Error-, Load-, und Progresshandler

        Progress:
        ---------
          this._callback.onProgress(event.target, event.position,
            event.totalSize); => updateCheckListener in aboutDialog.js

        Error:
        ------
          this._callback.onError(request, update); => updateCheckListener in
            aboutDialog.js [update ist new Update(null) + statusText]

        Load:
        -----
          Einlesen von certs* prefs, wenn keine app.update.url.override
           |
          in get _updates() parsen der XML-Antwort und Rückgabe eines Arrays
            mit Update-Objekten (Update() in nsUpdateService.js)
           |   
          gCertUtils.checkCert(this.request.channel, allowNonBuiltIn, certs);
            [siehe /toolkit/mozapps/shared/CertUtils.jsm]
          this._callback.onCheckComplete(event.target, updates,
             updates.length); => updateCheckListener in aboutDialog.js
                 |
          gAppUpdater.update = gAppupdater.aus.selectUpdate(aUpdates,
            aUpdates.length) ["aus" = UpdateService() definiert in
            nsUpdateService.js]
                       |
                     Check, ob Channel-Wechsel; wenn, dann automatisch erstes
                     Update zurückgeben
          


Sachen, die geändert werden müssen
==================================
-app.update.url.override muss angepasst werden
-app.update.certs.1* muss an unser/Torproject-Zertifikat angepasst werden
-app.update.auto? (vielleicht extra im JDF/Torbutton-Menü noch einmal!?)
-Einlesen der hard-kodierten Zerts auch wenn app.update.url.override (oder eben
  auf *.override verzichten und reguläre URL überschreiben; eher Letzteres,
  da Code daraufhin optimiert ist)
-Testen, ob builtInCheck auch klappt, wenn unsere/Torprojeckt-Zertifikate
  benutzt werden (siehe "3." Teil in checkCert()); evtl. Codeanpassung
